import React, { useState, useEffect } from 'react';
import { useParams, useLocation } from 'wouter';
import { ArrowLeft, User, Clock, FileCheck, TrendingUp, CreditCard } from 'lucide-react';
import { useQuery } from '@tanstack/react-query';
import { apiRequest } from '@/lib/queryClient';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { useToast } from '@/hooks/use-toast';
import { cn } from '@/lib/utils';
import { motion } from 'framer-motion';
import {
  IOS26Card,
  IOS26CardHeader,
  IOS26CardBody
} from '@/components/ui/card';

// Import all panel components
import OverviewPanel from '@/components/casePanels/OverviewPanel';
import TimelinePanel from '@/components/casePanels/TimelinePanel';
import DocumentsPanel from '@/components/casePanels/DocumentsPanel';
import PaymentsPanel from '@/components/casePanels/PaymentsPanel';
import TasksPanel from '@/components/casePanels/TasksPanel';
import CAPPanel from '@/components/casePanels/CAPPanel';
import FamilyTreePanel from '@/components/casePanels/FamilyTreePanel';

// Types
interface CaseData {
  id: string;
  client: {
    name: string;
    email?: string;
    phone?: string;
    address?: string;
  };
  processing: string;
  state: string;
  tier: string;
  age: number;
  difficulty: number;
  score: number;
  documents?: { [key: string]: any };
  payments?: { [key: string]: any };
  timeline?: any[];
  tasks?: any[];
}

// Styling functions from CaseDetailsV2
function getProcessingColor(processing: string): string {
  switch (processing?.toLowerCase()) {
    case 'tier1': return 'bg-green-500/20 text-green-400 border border-green-500/30';
    case 'tier2': return 'bg-blue-500/20 text-blue-400 border border-blue-500/30';
    case 'tier3': return 'bg-amber-500/20 text-amber-400 border border-amber-500/30';
    case 'rush': return 'bg-red-500/20 text-red-400 border border-red-500/30';
    default: return 'bg-gray-500/20 text-gray-400 border border-gray-500/30';
  }
}

function getStateColor(state: string): string {
  switch (state?.toLowerCase()) {
    case 'intake': return 'bg-blue-500/20 text-blue-400 border border-blue-500/30';
    case 'usc_in_flight': return 'bg-purple-500/20 text-purple-400 border border-purple-500/30';
    case 'oby_drafting': return 'bg-amber-500/20 text-amber-400 border border-amber-500/30';
    case 'usc_ready': return 'bg-green-500/20 text-green-400 border border-green-500/30';
    case 'oby_submittable': return 'bg-cyan-500/20 text-cyan-400 border border-cyan-500/30';
    case 'oby_submitted': return 'bg-indigo-500/20 text-indigo-400 border border-indigo-500/30';
    case 'decision_received': return 'bg-emerald-500/20 text-emerald-400 border border-emerald-500/30';
    default: return 'bg-gray-500/20 text-gray-400 border border-gray-500/30';
  }
}

// KPI Card component
const KPICard = ({ title, value, subtitle, icon: Icon, status }: {
  title: string;
  value: string | number;
  subtitle?: string;
  icon: any;
  status?: 'green' | 'amber' | 'red';
}) => (
  <motion.div
    initial={{ opacity: 0, y: 20, scale: 0.95 }}
    animate={{ 
      opacity: 1, 
      y: 0, 
      scale: 1,
      transition: {
        type: "spring",
        stiffness: 100,
        damping: 20,
      },
    }}
    whileHover={{
      y: -4,
      scale: 1.02,
      transition: { duration: 0.3 },
    }}
    className="w-full"
  >
    <IOS26Card strong={true} className="h-full">
      <div className="flex items-start justify-between p-4">
        <div className="flex flex-col space-y-1">
          <h3 className="text-2xl font-bold leading-none tracking-tight text-[var(--text)]">
            {value}
          </h3>
          <p className="text-sm text-[var(--text-subtle)]">
            {title}
          </p>
          {subtitle && (
            <p className="text-xs text-[var(--text-subtle)]">
              {subtitle}
            </p>
          )}
        </div>
        <div className={cn(
          "w-8 h-8 rounded-lg flex items-center justify-center",
          status === 'green' ? 'bg-green-500/20 text-green-400' :
          status === 'amber' ? 'bg-amber-500/20 text-amber-400' :
          status === 'red' ? 'bg-red-500/20 text-red-400' :
          'bg-muted/20 text-muted-foreground'
        )}>
          <Icon className="h-4 w-4" />
        </div>
      </div>
    </IOS26Card>
  </motion.div>
);

export default function CaseDetail() {
  const { caseId } = useParams<{ caseId: string }>();
  const [, setLocation] = useLocation();
  const { toast } = useToast();
  const [activeTab, setActiveTab] = useState('overview');

  // Fetch case data
  const { data: caseData, isLoading: caseLoading, error: caseError } = useQuery({
    queryKey: ['case-detail', caseId],
    queryFn: async () => {
      const response = await apiRequest('GET', `/api/admin/cases/${caseId}`);
      const data = await response.json();
      return data.case;
    },
    enabled: !!caseId,
    retry: 3,
    retryDelay: 1000,
  });

  // Get tab from URL
  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const tab = urlParams.get('tab');
    if (tab) {
      setActiveTab(tab);
    }
  }, []);

  // Update URL when tab changes
  const handleTabChange = (tab: string) => {
    setActiveTab(tab);
    const url = new URL(window.location.href);
    url.searchParams.set('tab', tab);
    window.history.replaceState(null, '', url.toString());
  };

  if (caseLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
      </div>
    );
  }

  if (caseError && !caseLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-destructive mb-2">Case Not Found</h1>
          <p className="text-muted-foreground mb-4">Unable to load case data</p>
          <Button onClick={() => setLocation('/admin/cases')} data-testid="button-back-to-cases">
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back to Cases
          </Button>
        </div>
      </div>
    );
  }

  if (!caseData && !caseLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-destructive mb-2">Case Not Found</h1>
          <p className="text-muted-foreground mb-4">No case data available</p>
          <Button onClick={() => setLocation('/admin/cases')} data-testid="button-back-to-cases">
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back to Cases
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-background">
      {/* Header */}
      <div className="border-b bg-card">
        <div className="container mx-auto px-4 py-4">
          {/* Breadcrumb and Title */}
          <div className="flex flex-col md:flex-row md:items-center md:justify-between mb-4 gap-4">
            <div className="flex flex-col md:flex-row md:items-center gap-2 md:gap-4">
              <Button variant="ghost" size="sm" onClick={() => setLocation('/admin/cases')} className="self-start" data-testid="button-breadcrumb-back">
                <ArrowLeft className="h-4 w-4 mr-2" />
                Back to Cases
              </Button>
              <div>
                <h1 className="text-xl md:text-2xl font-bold break-words">{caseData.client?.name || 'Case Details'}</h1>
                <p className="text-muted-foreground text-sm">Case ID: {caseId}</p>
              </div>
            </div>
            
            {/* Status Badges */}
            <div className="flex items-center gap-2 flex-wrap">
              <Badge className={getProcessingColor(caseData.tier || caseData.processing)}>
                {caseData.tier || caseData.processing || 'Unknown'}
              </Badge>
              <Badge className={getStateColor(caseData.state)}>
                {caseData.state || 'Unknown'}
              </Badge>
            </div>
          </div>

          {/* KPI Row */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
            <KPICard
              title="Difficulty"
              value={caseData.difficulty || 'N/A'}
              icon={TrendingUp}
              status={caseData.difficulty > 70 ? 'red' : caseData.difficulty > 40 ? 'amber' : 'green'}
            />
            <KPICard
              title="Score"
              value={caseData.score || 'N/A'}
              icon={FileCheck}
              status={caseData.score > 80 ? 'green' : caseData.score > 50 ? 'amber' : 'red'}
            />
            <KPICard
              title="Age (days)"
              value={caseData.age || 'N/A'}
              icon={Clock}
              status={caseData.age > 90 ? 'red' : caseData.age > 30 ? 'amber' : 'green'}
            />
          </div>
        </div>
      </div>

      {/* Tabs */}
      <div className="container mx-auto px-4 py-6">
        <Tabs value={activeTab} onValueChange={handleTabChange} className="w-full">
          <TabsList className="w-full">{/* Horizontal scrollable row */}
            <TabsTrigger value="overview" className="text-xs md:text-sm" data-testid="tab-overview">Overview</TabsTrigger>
            <TabsTrigger value="timeline" className="text-xs md:text-sm" data-testid="tab-timeline">Timeline</TabsTrigger>
            <TabsTrigger value="documents" className="text-xs md:text-sm" data-testid="tab-documents">Documents</TabsTrigger>
            <TabsTrigger value="payments" className="text-xs md:text-sm" data-testid="tab-payments">Payments</TabsTrigger>
            <TabsTrigger value="tasks" className="text-xs md:text-sm" data-testid="tab-tasks">Tasks</TabsTrigger>
            <TabsTrigger value="cap" className="text-xs md:text-sm" data-testid="tab-cap">CAP</TabsTrigger>
            <TabsTrigger value="family-tree" className="text-xs md:text-sm" data-testid="tab-family-tree">Family Tree</TabsTrigger>
          </TabsList>

          <div className="mt-6">
            <TabsContent value="overview">
              <OverviewPanel caseData={caseData} />
            </TabsContent>
            
            <TabsContent value="timeline">
              <TimelinePanel caseId={caseId} />
            </TabsContent>
            
            <TabsContent value="documents">
              <DocumentsPanel caseId={caseId} caseData={caseData} />
            </TabsContent>
            
            <TabsContent value="payments">
              <PaymentsPanel caseId={caseId} caseData={caseData} />
            </TabsContent>
            
            <TabsContent value="tasks">
              <TasksPanel caseId={caseId} />
            </TabsContent>
            
            <TabsContent value="cap">
              <CAPPanel caseId={caseId} />
            </TabsContent>
            
            <TabsContent value="family-tree">
              <FamilyTreePanel caseId={caseId} />
            </TabsContent>
          </div>
        </Tabs>
      </div>
    </div>
  );
}